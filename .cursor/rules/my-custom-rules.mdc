# 프로젝트 룰 및 설명 — My New Song Dashboard

## 1. 프로젝트 개요

**목적**: 사용자들이 최신 신곡과 좋아하는 아티스트의 앨범을 쉽게 탐색하고 즐겨찾기 할 수 있는 웹 대시보드 개발

**주요 기능**:

- **아티스트 키워드 버튼**: 신곡 발매 아티스트 목록 보여주기, 클릭 시 아티스트 관련 신곡 상세 정보 제공
- **신곡 리스트 필터링**: 국가별, 장르별, 검색어 기반 신곡 필터링 및 탐색
- **Spotify API 활용**: 최신 앨범 및 아티스트 이미지, 트랙 정보 등 데이터를 Spotify API를 통해 실시간으로 받아옴
- **로그인 기능**: 구글 계정 기반 NextAuth 로그인 구현, 로그인 시 즐겨찾기 등록 및 관리 가능
- **즐겨찾기 기능**: 드래그앤드롭으로 앨범/아티스트를 즐겨찾기 영역에 추가, 저장 및 관리 가능
- **Skeleton UI**: 데이터 로딩 시 사용자 경험 개선을 위한 로딩 스켈레톤 UI 제공
- **반응형 디자인 및 다크모드 지원**

---

## 2. 기술 스택 및 주요 라이브러리

- **Frontend**: React, Next.js (app directory, React 18 기능 활용)
- **Authentication**: NextAuth.js (Google OAuth)
- **API 연동**: Spotify Web API (OAuth client credentials flow)
- **스타일링**: Tailwind CSS
- **상태 관리**: React hooks (useState, useEffect, useCallback)
- **최적화**: 동적 import (next/dynamic), Skeleton UI로 로딩 최적화
- **TypeScript**: 타입 안전성 강화 및 코드 안정성 확보

---

## 3. 프로젝트 룰 및 컨벤션

### 3.1 코드 스타일

- **타입스크립트 엄격모드 준수**: 명확한 타입 선언, any 최소화
- **컴포넌트 역할 분리**: UI 컴포넌트와 로직을 명확히 구분, 재사용 가능한 컴포넌트 설계
- **Hooks 규칙 준수**: Hooks는 항상 최상위에서 호출, 조건문 내 호출 금지
- **함수 메모이제이션**: useCallback 등 사용해 불필요한 렌더링 방지
- **비동기 처리**: API 호출은 async/await 혹은 .then() 체이닝, 에러 핸들링 필수

### 3.2 UI/UX

- **반응형 UI**: Tailwind의 grid/flex 및 미디어쿼리 활용, 모바일과 데스크탑 모두 최적화
- **다크모드 지원**: Tailwind dark 모드 클래스 적용
- **접근성 고려**: 적절한 aria-label, 버튼 포커스 스타일링 등 적용
- **Skeleton UI**: API 호출 중 로딩 상태 시 대체 UI 노출

### 3.3 API & 데이터 처리

- **Spotify API**: 국가별 country 파라미터로 신곡 조회, 아티스트 장르 필터링 구현
- **토큰 관리**: 서버 사이드에서 클라이언트 크레덴셜 토큰 발급 후 API 호출
- **데이터 병합 및 가공**: 아티스트 이미지 등 관련 데이터를 클라이언트에서 보강

### 3.4 인증 및 상태관리

- **로그인 필수**: 미로그인 시 서비스 제한 및 로그인 유도 UI 노출
- **즐겨찾기 상태**: 부모 컴포넌트에서 관리하며, 드래그앤드롭으로 즐겨찾기 영역에 추가 가능
- **상태 동기화 및 최적화**: 상태 변화 감지 및 불필요한 리렌더링 방지

---

## 4. 주요 컴포넌트 구조

- **HomePage**: 전체 화면 구성, 필터, 검색, 신곡/아티스트 리스트, 즐겨찾기 영역 포함
- **FavoriteDropZone**: 드래그앤드롭 대상 영역, 즐겨찾기 목록 렌더링
- **AlbumDetailPanel**: 선택한 앨범 상세 정보 및 수록곡 목록
- **AuthButton**: 로그인/로그아웃 버튼 (동적 import)
- **Skeleton**: 다양한 스켈레톤 UI 제공 컴포넌트

---

## 5. 주요 기능 플로우

1. 사용자가 국가, 장르, 검색어를 입력하면 debounced된 쿼리로 서버 API 호출
2. 서버 API에서 Spotify 최신 발매앨범 및 아티스트 데이터 받아옴
3. UI에 최신 앨범, 아티스트 리스트 렌더링 (아티스트는 키워드 버튼 형태)
4. 사용자가 아티스트/앨범을 드래그하여 즐겨찾기 영역에 추가
5. 즐겨찾기 상태는 부모 컴포넌트에서 관리하며, 추가 시 화면에 즉시 반영
6. 로그인한 사용자만 즐겨찾기 추가 및 관리 가능
7. 선택한 앨범 클릭 시 상세 정보 판넬에서 아티스트 이미지 및 수록곡 표시

---

## 6. 진행 중 이슈 및 계획

### 이슈

- Spotify API 토큰 만료 및 API 호출 실패 대응 필요
- 즐겨찾기 드래그앤드롭 시 상태 변화 및 렌더링 딜레이 문제
- 서버리스 환경에서 상태 유지 및 DB 연동 계획
- 클라이언트에서 국가별 신곡 정렬과 서버의 국가 감지 불일치 문제

### 계획

- 즐겨찾기 기능 완성 및 데이터베이스 연동
- UI 디자인 개선 및 다크모드 고도화
- 테스트 자동화 도입 및 보안 강화 (NextAuth 심화)
- 사용자 경험 개선을 위한 추가 기능 검토
  description:
  globs:
  alwaysApply: false

---

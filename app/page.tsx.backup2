"use client";

import { useState, useEffect, useCallback, useRef } from "react";
import { useSession } from "next-auth/react";
import Image from "next/image";
import { FavoriteDropZone } from "./components/FavoriteDropZone";
import ArtistDetailPanel from "./components/ArtistDetailPanel";
import AlbumDetailPanel from "./components/AlbumDetailPanel";
import Skeleton from "./components/Skeleton";
import LoginButton from "./components/LoginButton";
import { DropItem, Artist, Album } from "../types/spotify";

export default function HomePage() {
  const { data: session, status } = useSession();
  const [searchQuery, setSearchQuery] = useState("");
  const [debouncedQuery, setDebouncedQuery] = useState("");
  const [country, setCountry] = useState("KR");
  const [genre, setGenre] = useState("");
  const [albums, setAlbums] = useState<Album[]>([]);
  const [artists, setArtists] = useState<Artist[]>([]);
  const [favorites, setFavorites] = useState<DropItem[]>([]);
  const [loading, setLoading] = useState(false);
  const [isSidebarOpen, setIsSidebarOpen] = useState(false);
  const [selectedArtistId, setSelectedArtistId] = useState<string | null>(null);
  const [selectedAlbum, setSelectedAlbum] = useState<Album | null>(null);
  const [isComposing, setIsComposing] = useState(false);

  // 즐겨찾기 아이템 드롭 처리
  const handleDropItem = useCallback(
    async (item: DropItem) => {
      if (!session?.user?.id) {
        alert("로그인이 필요합니다.");
        return;
      }

      console.log("handleDropItem called with item:", item);

      // 이미 즐겨찾기에 있는지 확인 (id와 type 모두 체크)
      const existingFavorite = favorites.find(
        (fav) => fav.id === item.id && fav.type === item.type
      );

      if (existingFavorite) {
        console.log("Item already in favorites:", item);
        return;
      }

      try {
        // 데이터베이스에 즐겨찾기 추가
        await fetch("/api/favorites", {
          method: "POST",
          headers: {
            "Content-Type": "application/json",
          },
          body: JSON.stringify({
            type: item.type,
            spotifyId: item.id,
            name: item.name,
            image: item.image,
          }),
        });

        // 데이터베이스에서 최신 데이터 다시 로드
        const response = await fetch("/api/favorites");
        if (response.ok) {
          const data = await response.json();
          if (Array.isArray(data)) {
            setFavorites(data);
            console.log("Favorites refreshed from database:", data);
          }
        }
      } catch (error) {
        console.error("즐겨찾기 추가 오류:", error);
        alert("즐겨찾기 추가에 실패했습니다.");
      }
    },
    [favorites, session?.user?.id]
  );

  const toggleSidebar = useCallback(() => {
    setIsSidebarOpen((prev) => !prev);
  }, []);

  const handleArtistClick = useCallback((artistId: string) => {
    setSelectedArtistId(artistId);
    setSelectedAlbum(null);
  }, []);

  const handleArtistFavorite = useCallback(
    async (artist: Artist) => {
      if (!session?.user?.id) {
        alert("로그인이 필요합니다.");
        return;
      }

      const newFavorite: DropItem = {
        id: artist.id,
        name: artist.name,
        image: artist.image,
        type: "artist",
      };

      // 이미 즐겨찾기에 있는지 확인
      const existingFavorite = favorites.find(
        (fav) => fav.id === artist.id && fav.type === "artist"
      );

      try {
        if (existingFavorite) {
          // 즐겨찾기에서 제거
          await fetch(`/api/favorites?spotifyId=${artist.id}&type=artist`, {
            method: "DELETE",
          });
          setFavorites((prev) =>
            prev.filter(
              (fav) => !(fav.id === artist.id && fav.type === "artist")
            )
          );
        } else {
          // 즐겨찾기에 추가
          await fetch("/api/favorites", {
            method: "POST",
            headers: {
              "Content-Type": "application/json",
            },
            body: JSON.stringify({
              type: "artist",
              spotifyId: artist.id,
              name: artist.name,
              image: artist.image,
            }),
          });
          // 데이터베이스에서 최신 데이터 다시 로드
          const response = await fetch("/api/favorites");
          if (response.ok) {
            const data = await response.json();
            if (Array.isArray(data)) {
              setFavorites(data);
              console.log("Favorites refreshed from database:", data);
            }
          }
        }
      } catch (error) {
        console.error("즐겨찾기 처리 오류:", error);
        alert("즐겨찾기 처리에 실패했습니다.");
      }
    },
    [favorites, session?.user?.id]
  );

  const removeFavorite = useCallback(
    async (id: string, type: "artist" | "album") => {
      if (!session?.user?.id) {
        alert("로그인이 필요합니다.");
        return;
      }

      try {
        await fetch(`/api/favorites?spotifyId=${id}&type=${type}`, {
          method: "DELETE",
        });
        // 데이터베이스에서 최신 데이터 다시 로드
        const response = await fetch("/api/favorites");
        if (response.ok) {
          const data = await response.json();
          if (Array.isArray(data)) {
            setFavorites(data);
            console.log(
              "Favorites refreshed from database after removal:",
              data
            );
          }
        }
      } catch (error) {
        console.error("즐겨찾기 제거 오류:", error);
        alert("즐겨찾기 제거에 실패했습니다.");
      }
    },
    [session?.user?.id]
  );

  const handleAlbumFavorite = useCallback(
    async (album: Album) => {
      if (!session?.user?.id) {
        alert("로그인이 필요합니다.");
        return;
      }

      const newFavorite: DropItem = {
        id: album.id,
        name: album.name,
        image: album.images?.[0]?.url || "",
        type: "album",
      };

      // 이미 즐겨찾기에 있는지 확인
      const existingFavorite = favorites.find(
        (fav) => fav.id === album.id && fav.type === "album"
      );

      try {
        if (existingFavorite) {
          // 즐겨찾기에서 제거
          await fetch(`/api/favorites?spotifyId=${album.id}&type=album`, {
            method: "DELETE",
          });
          setFavorites((prev) =>
            prev.filter((fav) => !(fav.id === album.id && fav.type === "album"))
          );
        } else {
          // 즐겨찾기에 추가
          await fetch("/api/favorites", {
            method: "POST",
            headers: {
              "Content-Type": "application/json",
            },
            body: JSON.stringify({
              type: "album",
              spotifyId: album.id,
              name: album.name,
              image: album.images?.[0]?.url || "",
            }),
          });
          // 데이터베이스에서 최신 데이터 다시 로드
          const response = await fetch("/api/favorites");
          if (response.ok) {
            const data = await response.json();
            if (Array.isArray(data)) {
              setFavorites(data);
              console.log("Favorites refreshed from database:", data);
            }
          }
        }
      } catch (error) {
        console.error("앨범 즐겨찾기 처리 오류:", error);
        alert("앨범 즐겨찾기 처리에 실패했습니다.");
      }
    },
    [favorites, session?.user?.id]
  );

  // 로그인 시 즐겨찾기 데이터 로드
  useEffect(() => {
    const loadFavorites = async () => {
      if (session?.user?.id) {
        try {
          console.log("Loading favorites for user:", session.user.id);
          const response = await fetch("/api/favorites");
          if (!response.ok) {
            throw new Error(`HTTP error! status: ${response.status}`);
          }
          const data = await response.json();
          console.log("Favorites loaded:", data);
          if (Array.isArray(data)) {
            setFavorites(data);
          }
        } catch (error) {
          console.error("즐겨찾기 로드 오류:", error);
          setFavorites([]);
        }
      } else {
        console.log("No user session, clearing favorites");
        setFavorites([]);
      }
    };

    loadFavorites();
  }, [session?.user?.id, session?.user?.email]);

  // 즐겨찾기 아티스트가 있을 때 해당 아티스트들의 앨범 자동 로드
  useEffect(() => {
    const loadFavoriteArtistAlbums = async () => {
      const favoriteArtists = favorites.filter(
        (item) => item.type === "artist"
      );

      if (favoriteArtists.length > 0 && !searchQuery) {
        try {
          console.log("Loading albums for favorite artists:", favoriteArtists);
          setLoading(true);

          // 즐겨찾기 아티스트들의 이름을 사용하여 검색
          const searchPromises = favoriteArtists.map(async (artist) => {
            try {
              const searchResponse = await fetch(
                `/api/spotify/search-or-new-releases?query=${encodeURIComponent(
                  artist.name
                )}`
              );
              if (searchResponse.ok) {
                const searchData = await searchResponse.json();
                return searchData.albums || [];
              }
            } catch (error) {
              console.error(`Error loading albums for ${artist.name}:`, error);
            }
            return [];
          });

          const allAlbums = await Promise.all(searchPromises);
          const flatAlbums = allAlbums.flat();

          if (flatAlbums.length > 0) {
            setAlbums(flatAlbums);
          }
        } catch (error) {
          console.error("즐겨찾기 아티스트 앨범 로드 오류:", error);
        } finally {
          setLoading(false);
        }
      }
    };

    loadFavoriteArtistAlbums();
  }, [favorites, searchQuery]);

  // 디바운스 처리
  useEffect(() => {
    if (isComposing) return;
    const handler = setTimeout(() => setDebouncedQuery(searchQuery), 1200);
    return () => clearTimeout(handler);
  }, [searchQuery, isComposing]);

  // 검색 및 앨범/아티스트 fetch
  useEffect(() => {
    if (!debouncedQuery || debouncedQuery.trim().length < 2) {
      return;
    }

    const fetchData = async () => {
      try {
        setLoading(true);
        const params = new URLSearchParams();
        params.set("query", debouncedQuery);
        if (genre) params.set("genre", genre);

        const response = await fetch(
          `/api/spotify/search-or-new-releases?${params.toString()}`
        );
        if (response.ok) {
          const data = await response.json();
          setAlbums(data.albums || []);
          setArtists(data.artists || []);
        }
      } catch (error) {
        console.error("검색 오류:", error);
      } finally {
        setLoading(false);
      }
    };

    fetchData();
  }, [debouncedQuery, genre]);

  if (status === "loading") return <p>로딩 중...</p>;
  if (!session)
    return (
      <div className="p-4 max-w-3xl mx-auto text-center">
        <h2 className="text-xl font-bold mb-4">로그인이 필요합니다</h2>
        <LoginButton />
      </div>
    );

  const headerGradient = searchQuery
    ? "from-blue-600 to-purple-600"
    : favorites.filter((f) => f.type === "artist").length > 0
    ? "from-pink-600 to-purple-600"
    : "from-green-600 to-blue-600";

  return (
    <div className="flex">
      {/* 즐겨찾기 사이드바 */}
      <FavoriteDropZone
        favorites={favorites}
        setFavorites={setFavorites}
        onDropItem={handleDropItem}
        isOpen={isSidebarOpen}
        onToggle={toggleSidebar}
        onArtistClick={handleArtistClick}
        onRemoveFavorite={removeFavorite}
      />

      {/* 메인 콘텐츠 */}
      <main
        className={`flex-1 transition-all duration-300 ${
          isSidebarOpen ? "ml-[320px]" : "ml-0"
        } ${selectedAlbum || selectedArtistId ? "pr-[320px]" : "pr-0"}`}
      >
        {/* 헤더 */}
        <div
          className={`mb-6 p-6 bg-gradient-to-r ${headerGradient} text-white shadow-sm`}
        >
          <div className="flex justify-between items-center">
            <h1 className="text-2xl md:text-3xl font-bold">
              🎧{" "}
              {searchQuery
                ? `"${searchQuery}" 검색 결과`
                : favorites.filter((f) => f.type === "artist").length > 0
                ? "즐겨찾기 아티스트 신곡"
                : `${
                    country === "KR"
                      ? "한국"
                      : country === "JP"
                      ? "일본"
                      : country === "US"
                      ? "미국"
                      : country === "GB"
                      ? "영국"
                      : ""
                  } 최신 앨범 탐색`}
            </h1>
            <LoginButton />
          </div>
        </div>

        {/* 검색 및 필터 */}
        <div className="px-6 mb-6">
          <div className="grid grid-cols-1 sm:grid-cols-2 md:grid-cols-3 gap-4">
            <div>
              <label className="text-sm font-medium text-gray-700 dark:text-gray-300 mb-1 block">
                Country
              </label>
              <select
                className="border border-gray-300 dark:border-gray-600 rounded px-3 py-2 text-sm bg-white dark:bg-gray-700 text-gray-800 dark:text-gray-200"
                value={country}
                onChange={(e) => setCountry(e.target.value)}
              >
                <option value="KR">한국</option>
                <option value="JP">일본</option>
                <option value="US">미국</option>
                <option value="GB">영국</option>
              </select>
            </div>
            <div>
              <label className="text-sm font-medium text-gray-700 dark:text-gray-300 mb-1 block">
                Genre
              </label>
              <select
                className="border border-gray-300 dark:border-gray-600 rounded px-3 py-2 text-sm bg-white dark:bg-gray-700 text-gray-800 dark:text-gray-200"
                value={genre}
                onChange={(e) => setGenre(e.target.value)}
              >
                <option value="">전체</option>
                <option value="pop">팝</option>
                <option value="rock">락</option>
                <option value="hip-hop">힙합</option>
                <option value="electronic">일렉트로닉</option>
                <option value="jazz">재즈</option>
                <option value="classical">클래식</option>
              </select>
            </div>
            <div>
              <label className="text-sm font-medium text-gray-700 dark:text-gray-300 mb-1 block">
                검색
              </label>
              <input
                type="text"
                value={searchQuery}
                onChange={(e) => setSearchQuery(e.target.value)}
                onCompositionStart={() => setIsComposing(true)}
                onCompositionEnd={(e) => {
                  setIsComposing(false);
                  if (e.currentTarget) {
                    setSearchQuery(e.currentTarget.value);
                  }
                }}
                placeholder="아티스트나 앨범을 검색하세요..."
                className="w-full border border-gray-300 dark:border-gray-600 rounded px-3 py-2 text-sm bg-white dark:bg-gray-700 text-gray-800 dark:text-gray-200"
              />
            </div>
          </div>
        </div>

        {/* 즐겨찾기 아티스트가 있을 때 아티스트 그리드 표시 (검색 중이 아닐 때) */}
        {favorites.filter((f) => f.type === "artist").length > 0 &&
          !searchQuery && (
            <div className="px-6 mb-6">
              <div className="flex items-center justify-between mb-3">
                <h3 className="text-lg font-semibold text-gray-800 dark:text-gray-200">
                  즐겨찾기 아티스트
                </h3>
                <span className="text-sm text-gray-500 dark:text-gray-400">
                  {favorites.filter((f) => f.type === "artist").length}명
                </span>
              </div>
              <div className="grid grid-cols-3 sm:grid-cols-4 md:grid-cols-6 lg:grid-cols-8 gap-3 max-h-96 overflow-y-auto border-b border-gray-300 dark:border-gray-700 p-2">
                {favorites
                  .filter((f) => f.type === "artist")
                  .map((fav) => {
                    const artistImage = fav.image || "";
                    const artistName = fav.name || "";
                    return (
                      <div key={fav.id} className="relative">
                        <div
                          draggable
                          onDragStart={(e) => {
                            e.dataTransfer.setData(
                              "application/json",
                              JSON.stringify({
                                id: fav.id,
                                name: artistName,
                                image: artistImage,
                                type: "artist",
                              })
                            );
                          }}
                          onClick={() => handleArtistClick(fav.id)}
                          className="group relative rounded m-3 overflow-hidden shadow cursor-pointer focus:outline-none focus:ring-2 focus:ring-blue-500 w-full"
                        >
                          {artistImage ? (
                            <Image
                              src={artistImage}
                              alt={artistName}
                              width={300}
                              height={180}
                              className="w-full h-24 object-cover transition-all duration-300 group-hover:blur-[2px] group-hover:brightness-75"
                            />
                          ) : (
                            <div className="w-full h-24 bg-gray-200 dark:bg-gray-700" />
                          )}
                          <div className="absolute bottom-0 w-full bg-black/60 text-white text-sm font-semibold text-center py-1">
                            {artistName}
                          </div>
                          <button
                            onClick={(e) => {
                              e.stopPropagation();
                              removeFavorite(fav.id, fav.type);
                            }}
                            className="absolute inset-0 flex items-center justify-center"
                            aria-label="즐겨찾기 토글"
                          >
                            <svg
                              className="w-7 h-7 text-red-500 drop-shadow"
                              fill="currentColor"
                              viewBox="0 0 20 20"
                            >
                              <path
                                fillRule="evenodd"
                                d="M3.172 5.172a4 4 0 015.656 0L10 6.343l1.172-1.171a4 5 0 115.656 5.656L10 17.657l-6.828-6.829a4 4 0 010-5.656z"
                              />
                            </svg>
                          </button>
                        </div>
                      </div>
                    );
                  })}
              </div>
            </div>
          )}

        {/* 검색 결과가 없을 때 안내 메시지 */}
        {searchQuery &&
          !loading &&
          albums.length === 0 &&
          artists.length === 0 && (
            <div className="px-6 mb-6 text-center">
              <div className="py-12">
                <h3 className="text-lg font-medium text-gray-600 dark:text-gray-400 mb-2">
                  검색 결과가 없습니다
                </h3>
                <p className="text-gray-500 dark:text-gray-500 mb-4">
                  다른 키워드로 검색해보세요
                </p>
                <button
                  onClick={() => setSearchQuery("")}
                  className="px-4 py-2 bg-gray-600 hover:bg-gray-700 text-white rounded-lg transition-colors"
                >
                  검색 초기화
                </button>
              </div>
            </div>
          )}

        {/* 검색 결과가 있을 때 아티스트와 앨범 표시 */}
        {searchQuery &&
          !loading &&
          (artists.length > 0 || albums.length > 0) && (
            <div className="px-6 mb-6">
              {/* 검색된 아티스트들 */}
              {artists.length > 0 && (
                <div className="mb-8">
                  <h3 className="text-lg font-semibold text-gray-800 dark:text-gray-200 mb-4">
                    검색된 아티스트 ({artists.length}명)
                  </h3>
                  <div className="grid grid-cols-2 sm:grid-cols-3 md:grid-cols-4 lg:grid-cols-6 gap-4">
                    {artists.map((artist) => (
                      <div key={artist.id} className="relative">
                        <div
                          draggable
                          onDragStart={(e) => {
                            e.dataTransfer.setData(
                              "application/json",
                              JSON.stringify({
                                id: artist.id,
                                name: artist.name,
                                image: artist.image,
                                type: "artist",
                              })
                            );
                          }}
                          onClick={() => handleArtistClick(artist.id)}
                          className="group relative rounded-lg overflow-hidden shadow-lg cursor-pointer focus:outline-none focus:ring-2 focus:ring-blue-500 transition-all duration-300 hover:shadow-xl"
                        >
                          {artist.image ? (
                            <Image
                              src={artist.image}
                              alt={artist.name}
                              width={300}
                              height={300}
                              className="w-full h-32 object-cover transition-all duration-300 group-hover:scale-105"
                            />
                          ) : (
                            <div className="w-full h-32 bg-gray-200 dark:bg-gray-700 flex items-center justify-center">
                              <span className="text-gray-400 text-sm">
                                이미지 없음
                              </span>
                            </div>
                          )}
                          <div className="absolute bottom-0 w-full bg-black/60 text-white text-sm font-semibold text-center py-2">
                            {artist.name}
                          </div>
                          <button
                            onClick={(e) => {
                              e.stopPropagation();
                              const isFavorite = favorites.some(
                                (f) => f.id === artist.id && f.type === "artist"
                              );
                              if (isFavorite) {
                                removeFavorite(artist.id, "artist");
                              } else {
                                handleArtistFavorite(artist);
                              }
                            }}
                            className="absolute top-2 right-2 p-1 rounded-full bg-black/40 hover:bg-black/60 transition-colors"
                            aria-label="즐겨찾기 토글"
                          >
                            {favorites.some(
                              (f) => f.id === artist.id && f.type === "artist"
                            ) ? (
                              <svg
                                className="w-5 h-5 text-red-500"
                                fill="currentColor"
                                viewBox="0 0 20 20"
                              >
                                <path
                                  fillRule="evenodd"
                                  d="M3.172 5.172a4 4 0 015.656 0L10 6.343l1.172-1.171a4 5 0 115.656 5.656L10 17.657l-6.828-6.829a4 4 0 010-5.656z"
                                />
                              </svg>
                            ) : (
                              <svg
                                className="w-5 h-5 text-white"
                                fill="none"
                                stroke="currentColor"
                                viewBox="0 0 24 24"
                              >
                                <path
                                  strokeLinecap="round"
                                  strokeLinejoin="round"
                                  strokeWidth={2}
                                  d="M4.318 6.318a4.5 4.5 0 000 6.364L12 20.364l7.682-7.682a4.5 4.5 0 00-6.364-6.364L12 7.636l-1.318-1.318a4.5 4.5 0 00-6.364 0z"
                                />
                              </svg>
                            )}
                          </button>
                        </div>
                      </div>
                    ))}
                  </div>
                </div>
              )}

              {/* 검색된 앨범들 */}
              {albums.length > 0 && (
                <div>
                  <h3 className="text-lg font-semibold text-gray-800 dark:text-gray-200 mb-4">
                    검색된 앨범 ({albums.length}개)
                  </h3>
                  <div className="grid grid-cols-2 sm:grid-cols-3 md:grid-cols-4 lg:grid-cols-6 gap-4">
                    {albums.map((album) => (
                      <div key={album.id} className="relative">
                        <div
                          draggable
                          onDragStart={(e) => {
                            e.dataTransfer.setData(
                              "application/json",
                              JSON.stringify({
                                id: album.id,
                                name: album.name,
                                image: album.images[0]?.url || "",
                                type: "album",
                              })
                            );
                          }}
                          onClick={() => {
                            const enrichedAlbum = {
                              ...album,
                              artists: album.artists.map((artist) => ({
                                ...artist,
                                image: "",
                              })),
                            };
                            setSelectedAlbum(enrichedAlbum);
                            setSelectedArtistId(null);
                          }}
                          className="group relative rounded-lg overflow-hidden shadow-lg cursor-pointer focus:outline-none focus:ring-2 focus:ring-blue-500 transition-all duration-300 hover:shadow-xl"
                        >
                          {album.images[0]?.url ? (
                            <Image
                              src={album.images[0].url}
                              alt={album.name}
                              width={300}
                              height={300}
                              className="w-full h-32 object-cover transition-all duration-300 group-hover:scale-105"
                            />
                          ) : (
                            <div className="w-full h-32 bg-gray-200 dark:bg-gray-700 flex items-center justify-center">
                              <span className="text-gray-400 text-sm">
                                이미지 없음
                              </span>
                            </div>
                          )}
                          <div className="absolute bottom-0 w-full bg-black/60 text-white text-sm font-semibold text-center py-2 px-2">
                            <div className="truncate">{album.name}</div>
                            <div className="text-xs text-gray-300 truncate">
                              {album.artists.map((a) => a.name).join(", ")}
                            </div>
                          </div>
                          <button
                            onClick={(e) => {
                              e.stopPropagation();
                              const isFavorite = favorites.some(
                                (f) => f.id === album.id && f.type === "album"
                              );
                              if (isFavorite) {
                                removeFavorite(album.id, "album");
                              } else {
                                handleAlbumFavorite(album);
                              }
                            }}
                            className="absolute top-2 right-2 p-1 rounded-full bg-black/40 hover:bg-black/60 transition-colors"
                            aria-label="즐겨찾기 토글"
                          >
                            {favorites.some(
                              (f) => f.id === album.id && f.type === "album"
                            ) ? (
                              <svg
                                className="w-5 h-5 text-red-500"
                                fill="currentColor"
                                viewBox="0 0 20 20"
                              >
                                <path
                                  fillRule="evenodd"
                                  d="M3.172 5.172a4 4 0 015.656 0L10 6.343l1.172-1.171a4 5 0 115.656 5.656L10 17.657l-6.828-6.829a4 4 0 010-5.656z"
                                />
                              </svg>
                            ) : (
                              <svg
                                className="w-5 h-5 text-white"
                                fill="none"
                                stroke="currentColor"
                                viewBox="0 0 24 24"
                              >
                                <path
                                  strokeLinecap="round"
                                  strokeLinejoin="round"
                                  strokeWidth={2}
                                  d="M4.318 6.318a4.5 4.5 0 000 6.364L12 20.364l7.682-7.682a4.5 4.5 0 00-6.364-6.364L12 7.636l-1.318-1.318a4.5 4.5 0 00-6.364 0z"
                                />
                              </svg>
                            )}
                          </button>
                        </div>
                      </div>
                    ))}
                  </div>
                </div>
              )}
            </div>
          )}

        {/* 앨범 리스트 - 검색 중이 아닐 때만 표시 */}
        {!searchQuery && (
          <>
            {loading ? (
              <Skeleton variant="album" count={10} />
            ) : (
              <>
                {/* 즐겨찾기 아티스트가 있을 때만 앨범 리스트 표시 */}
                {favorites.filter((f) => f.type === "artist").length > 0 ? (
                  <>
                    <div className="px-6 pb-6">
                      <div className="flex items-center justify-between mb-4">
                        <h3 className="text-lg font-semibold text-gray-800 dark:text-gray-200">
                          즐겨찾기 아티스트 신곡
                        </h3>
                        <span className="text-sm text-gray-500 dark:text-gray-400">
                          {albums.length}개 앨범
                        </span>
                      </div>

                      {loading ? (
                        <Skeleton variant="album" count={5} />
                      ) : albums.length > 0 ? (
                        <div className="grid grid-cols-1 sm:grid-cols-2 md:grid-cols-5 gap-6">
                          {albums.map((album) => {
                            const isFavoriteArtist = album.artists.some((artist) =>
                              favorites.some(
                                (fav) =>
                                  fav.type === "artist" && fav.id === artist.id
                              )
                            );

                            return (
                              <div
                                key={album.id}
                                draggable
                                onDragStart={(e) => {
                                  e.dataTransfer.setData(
                                    "application/json",
                                    JSON.stringify({
                                      id: album.id,
                                      name: album.name,
                                      image: album.images?.[0]?.url || "",
                                      type: "album",
                                    })
                                  );
                                }}
                                onClick={() => {
                                  const enrichedAlbum = {
                                    ...album,
                                    artists: album.artists.map((artist) => {
                                      const matchedArtist = artists.find(
                                        (a) => a.id === artist.id
                                      );
                                      return {
                                        ...artist,
                                        image: matchedArtist?.image || "",
                                      };
                                    }),
                                  };
                                  setSelectedAlbum(enrichedAlbum);
                                  setSelectedArtistId(null);
                                }}
                                className="bg-white dark:bg-gray-800 border border-gray-300 dark:border-gray-600 rounded-lg p-4 shadow-sm hover:shadow-md transition-shadow flex flex-col cursor-pointer relative"
                              >
                                {/* 즐겨찾기 하트 버튼 */}
                                <div className="absolute top-2 right-2 z-10">
                                  <button
                                    onClick={(e) => {
                                      e.stopPropagation();
                                      handleAlbumFavorite(album);
                                    }}
                                    className="group relative"
                                  >
                                    <div className="w-8 h-8 bg-white/90 dark:bg-gray-800/90 rounded-full flex items-center justify-center shadow-lg border border-white/20 backdrop-blur-sm hover:scale-110 transition-transform">
                                      <svg
                                        className={`w-4 h-4 transition-colors ${
                                          favorites.find(
                                            (fav) =>
                                              fav.id === album.id &&
                                              fav.type === "album"
                                          )
                                            ? "text-red-500 fill-current"
                                            : "text-gray-600 dark:text-gray-400 hover:text-red-500"
                                        }`}
                                        fill={
                                          favorites.find(
                                            (fav) =>
                                              fav.id === album.id &&
                                              fav.type === "album"
                                          )
                                            ? "currentColor"
                                            : "none"
                                        }
                                        stroke="currentColor"
                                        viewBox="0 0 24 24"
                                      >
                                        <path
                                          strokeLinecap="round"
                                          strokeLinejoin="round"
                                          strokeWidth={2}
                                          d="M4.318 6.318a4.5 4.5 0 000 6.364L12 20.364l7.682-7.682a4.5 4.5 0 00-6.364-6.364L12 7.636l-1.318-1.318a4.5 4.5 0 00-6.364 0z"
                                        />
                                      </svg>
                                    </div>
                                  </button>
                                </div>

                            {/* 즐겨찾기 아티스트 표시 */}
                            {isFavoriteArtist && (
                              <div className="absolute top-2 left-2 z-10">
                                <div className="bg-gradient-to-r from-pink-500 via-purple-500 to-indigo-600 text-white text-xs px-3 py-1.5 rounded-full font-semibold shadow-lg border border-white/20 backdrop-blur-sm">
                                  <div className="flex items-center gap-1">
                                    <svg
                                      className="w-3 h-3"
                                      fill="currentColor"
                                      viewBox="0 0 20 20"
                                    >
                                      <path
                                        fillRule="evenodd"
                                        d="M3.172 5.172a4 4 0 015.656 0L10 6.343l1.172-1.171a4 5 0 115.656 5.656L10 17.657l-6.828-6.829a4 4 0 010-5.656z"
                                      />
                                    </svg>
                                    <span>즐겨찾기</span>
                                  </div>
                                </div>
                              </div>
                            )}

                            {album.images?.[0]?.url ? (
                              <Image
                                src={album.images[0].url}
                                alt={album.name}
                                width={300}
                                height={300}
                                className="rounded-md w-full h-auto object-cover"
                              />
                            ) : (
                              <div className="w-full aspect-square rounded-md bg-gray-200 dark:bg-gray-700" />
                            )}
                            <h2 className="mt-3 text-lg font-semibold text-gray-800 dark:text-gray-200">
                              {album.name}
                            </h2>
                            <p className="text-sm text-gray-600 dark:text-gray-400">
                              {album.artists
                                .map((artist) => artist.name)
                                .join(", ")}
                            </p>
                            <p className="text-xs text-gray-500 dark:text-gray-400">
                              {album.release_date}
                            </p>
                            <a
                              href={album.external_urls.spotify}
                              target="_blank"
                              rel="noopener noreferrer"
                              className="inline-block mt-2 px-3 py-1 text-sm font-semibold text-white bg-green-600 rounded hover:bg-green-700 transition"
                              aria-label={`Play ${album.name} on Spotify`}
                            >
                              ▶ 재생하기
                            </a>
                          </div>
                        );
                      })}
                    </div>
                  ) : (
                    <div className="text-center py-8 text-gray-500 dark:text-gray-400">
                      <p>즐겨찾기한 아티스트의 신곡을 불러오는 중...</p>
                    </div>
                  )}
                </div>

                {/* 앨범 즐겨찾기 섹션 */}
                {favorites.filter((f) => f.type === "album").length > 0 && (
                  <div className="px-6 mb-6">
                    <div className="flex items-center justify-between mb-4">
                      <h3 className="text-lg font-semibold text-gray-800 dark:text-gray-200">
                        즐겨찾기 앨범
                      </h3>
                      <span className="text-sm text-gray-500 dark:text-gray-400">
                        {favorites.filter((f) => f.type === "album").length}개
                        앨범
                      </span>
                    </div>
                    <div className="grid grid-cols-1 sm:grid-cols-2 md:grid-cols-5 gap-6">
                      {favorites
                        .filter((f) => f.type === "album")
                        .map((fav) => (
                          <div
                            key={fav.id}
                            draggable
                            onDragStart={(e) => {
                              e.dataTransfer.setData(
                                "application/json",
                                JSON.stringify({
                                  id: fav.id,
                                  name: fav.name,
                                  image: fav.image || "",
                                  type: "album",
                                })
                              );
                            }}
                            className="bg-white dark:bg-gray-800 border border-gray-300 dark:border-gray-600 rounded-lg p-4 shadow-sm hover:shadow-md transition-shadow flex flex-col cursor-pointer relative"
                          >
                            {/* 즐겨찾기 하트 버튼 */}
                            <div className="absolute top-2 right-2 z-10">
                              <button
                                onClick={(e) => {
                                  e.stopPropagation();
                                  removeFavorite(fav.id, fav.type);
                                }}
                                className="group relative"
                              >
                                <div className="w-8 h-8 bg-white/90 dark:bg-gray-800/90 rounded-full flex items-center justify-center shadow-lg border border-white/20 backdrop-blur-sm hover:scale-110 transition-transform">
                                  <svg
                                    className="w-4 h-4 text-red-500 fill-current"
                                    viewBox="0 0 24 24"
                                  >
                                    <path
                                      strokeLinecap="round"
                                      strokeLinejoin="round"
                                      strokeWidth={2}
                                      d="M4.318 6.318a4.5 4.5 0 000 6.364L12 20.364l7.682-7.682a4.5 4.5 0 00-6.364-6.364L12 7.636l-1.318-1.318a4.5 4.5 0 00-6.364 0z"
                                    />
                                  </svg>
                                </div>
                              </button>
                            </div>

                            {fav.image ? (
                              <Image
                                src={fav.image}
                                alt={fav.name}
                                width={300}
                                height={300}
                                className="rounded-md w-full h-auto object-cover"
                              />
                            ) : (
                              <div className="w-full aspect-square rounded-md bg-gray-200 dark:bg-gray-700" />
                            )}
                            <h2 className="mt-3 text-lg font-semibold text-gray-800 dark:text-gray-200">
                              {fav.name}
                            </h2>
                            <p className="text-xs text-gray-500 dark:text-gray-400 capitalize">
                              앨범
                            </p>
                          </div>
                        ))}
                    </div>
                  </div>
                )}
              </>
            ) : (
              /* 즐겨찾기 아티스트가 없을 때 안내 메시지 */
              <div className="px-6 pb-6">
                <div className="text-center py-12">
                  <div className="w-20 h-20 mx-auto mb-6 text-gray-300 dark:text-gray-600">
                    <div className="w-20 h-20 flex items-center justify-center mx-auto bg-gray-100 dark:bg-gray-800 rounded-full">
                      <svg
                        fill="none"
                        stroke="currentColor"
                        viewBox="0 0 24 24"
                        className="w-12 h-12 mr-1"
                      >
                        <path
                          strokeLinecap="round"
                          strokeLinejoin="round"
                          strokeWidth={1}
                          d="M9 19V6l12-3v13M9 19c0 1.105-1.343 2-3 2s-3-.895-3-2 1.343-2 3-2 3 .895 3 2zm12-3c0 1.105-1.343 2-3 2s-3-.895-3-2 1.343-2 3-2 3 .895 3 2zM9 10l12-3"
                        />
                      </svg>
                    </div>
                  </div>
                  <h3 className="text-xl font-medium text-gray-600 dark:text-gray-400 mb-3">
                    아직 즐겨찾기한 아티스트가 없습니다
                  </h3>
                  <p className="text-gray-500 dark:text-gray-500 mb-6 max-w-md mx-auto">
                    위에서 좋아하는 아티스트를 검색하고 즐겨찾기에 추가하면,
                    <br />
                    해당 아티스트들의 최신 음악을 볼 수 있습니다.
                  </p>
                  <div className="flex justify-center">
                    <button
                      onClick={() => {
                        const searchInput = document.querySelector(
                          'input[placeholder*="검색"]'
                        ) as HTMLInputElement;
                        if (searchInput) {
                          searchInput.focus();
                        }
                      }}
                      className="px-6 py-3 bg-blue-600 hover:bg-blue-700 text-white rounded-lg font-medium transition-colors"
                    >
                      아티스트 검색하기
                    </button>
                  </div>
                </div>
              </div>
            )}

            {/* 검색 결과가 있을 때 아티스트 그리드 표시 */}
            {searchQuery && artists.length > 0 && (
              <>
                <div className="flex items-center justify-between mb-3">
                  <h3 className="text-lg font-semibold text-gray-800 dark:text-gray-200">
                    검색된 아티스트
                  </h3>
                  <span className="text-sm text-gray-500 dark:text-gray-400">
                    {artists.length}명
                  </span>
                </div>
                <div className="grid grid-cols-3 sm:grid-cols-4 md:grid-cols-6 lg:grid-cols-8 gap-3 max-h-96 overflow-y-auto border-b border-gray-300 dark:border-gray-700 p-2">
                  {artists.map((artist) => {
                    const isFavorite = favorites.some(
                      (fav) => fav.type === "artist" && fav.id === artist.id
                    );
                    return (
                      <div key={artist.id} className="relative">
                        <div
                          draggable
                          onDragStart={(e) => {
                            e.dataTransfer.setData(
                              "application/json",
                              JSON.stringify({
                                id: artist.id,
                                name: artist.name,
                                image: artist.image,
                                type: "artist",
                              })
                            );
                          }}
                          onClick={() => handleArtistClick(artist.id)}
                          className="group relative rounded m-3 overflow-hidden shadow cursor-pointer focus:outline-none focus:ring-2 focus:ring-blue-500 w-full"
                        >
                          {artist.image ? (
                            <Image
                              src={artist.image}
                              alt={artist.name}
                              width={300}
                              height={180}
                              className="w-full h-24 object-cover transition-all duration-300 group-hover:blur-[2px] group-hover:brightness-75"
                            />
                          ) : (
                            <div className="w-full h-24 bg-gray-200 dark:bg-gray-700" />
                          )}
                          <div className="absolute bottom-0 w-full bg-black/60 text-white text-sm font-semibold text-center py-1">
                            {artist.name}
                          </div>
                          {/* 중앙 하트 버튼 (호버 시 표시) */}
                          <button
                            onClick={(e) => {
                              e.stopPropagation();
                              handleArtistFavorite(artist);
                            }}
                            className="absolute inset-0 flex items-center justify-center"
                            aria-label="즐겨찾기 토글"
                          >
                            {isFavorite ? (
                              <svg
                                className="w-7 h-7 text-red-500 drop-shadow"
                                fill="currentColor"
                                viewBox="0 0 20 20"
                              >
                                <path
                                  fillRule="evenodd"
                                  d="M3.172 5.172a4 4 0 015.656 0L10 6.343l1.172-1.171a4 5 0 115.656 5.656L10 17.657l-6.828-6.829a4 4 0 010-5.656z"
                                />
                              </svg>
                            ) : (
                              <svg
                                className="w-7 h-7 text-gray-400 drop-shadow opacity-0 group-hover:opacity-100 transition-opacity"
                                fill="none"
                                stroke="currentColor"
                                viewBox="0 0 20 20"
                              >
                                <path
                                  strokeLinecap="round"
                                  strokeLinejoin="round"
                                  strokeWidth={2}
                                  d="M3.172 5.172a4 4 0 015.656 0L10 6.343l1.172-1.171a4 5 0 115.656 5.656L10 17.657l-6.828-6.829a4 4 0 010-5.656z"
                                />
                              </svg>
                            )}
                          </button>
                        </div>
                      </div>
                    );
                  })}
                </div>
              </>
            )}
          </>
        )}

        {/* 사이드바 토글 버튼 */}
        <button
          onClick={toggleSidebar}
          className="fixed bottom-6 right-6 w-14 h-14 bg-blue-600 hover:bg-blue-700 text-white rounded-full shadow-lg flex items-center justify-center transition-all duration-200 z-50"
          aria-label="즐겨찾기 사이드바 토글"
        >
          <svg
            className="w-6 h-6"
            fill="none"
            stroke="currentColor"
            viewBox="0 0 24 24"
          >
            <path
              strokeLinecap="round"
              strokeLinejoin="round"
              strokeWidth={2}
                            d="M4.172 5.172a4 4 0 015.656 0L10 6.343l1.172-1.171a4 5 0 115.656 5.656L10 17.657l-6.828-6.829a4 4 0 010-5.656z"
            />
          </svg>
        </button>
      </main>

      {/* 아티스트 상세 패널 */}
      {selectedArtistId && (
        <ArtistDetailPanel
          artistId={selectedArtistId}
          onClose={() => setSelectedArtistId(null)}
        />
      )}

      {/* 앨범 상세 패널 */}
      {selectedAlbum && (
        <AlbumDetailPanel
          album={selectedAlbum}
          onClose={() => setSelectedAlbum(null)}
        />
      )}
    </div>
  );
}
